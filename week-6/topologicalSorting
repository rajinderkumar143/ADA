#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void topologicalSort(vector<vector<int>>& graph, int n) {
    vector<int> indegree(n, 0);

    // Calculate indegree of each vertex
    for (int u = 0; u < n; u++) {
        for (int v = 0; v < n; v++) {
            if (graph[u][v] == 1)
                indegree[v]++;
        }
    }

    // Enqueue all vertices with indegree 0
    queue<int> q;
    for (int i = 0; i < n; i++) {
        if (indegree[i] == 0)
            q.push(i);
    }

    vector<int> topo_order;

    while (!q.empty()) {
        int u = q.front();
        q.pop();
        topo_order.push_back(u);

        // Decrease indegree of adjacent vertices
        for (int v = 0; v < n; v++) {
            if (graph[u][v] == 1) {
                indegree[v]--;
                if (indegree[v] == 0)
                    q.push(v);
            }
        }
    }

    // If topological sort is possible
    if (topo_order.size() == n) {
        cout << "Topological Sorted Order is:";
        for (int v : topo_order)
            cout << " " << v;
        cout << endl;
    } else {
        cout << "Topological Sorting not possible (Graph has a cycle)." << endl;
    }
}

int main() {
    int n;
    cout << "Enter number of vertices: ";
    cin >> n;

    vector<vector<int>> graph(n, vector<int>(n));
    cout << "Enter adjacency matrix:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> graph[i][j];
        }
    }

    topologicalSort(graph, n);

    return 0;
}
