#include <iostream>
#include <vector>
using namespace std;

void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

void printPermutation(const vector<int> &p) {
    cout << "Permutation: ";
    for (int val : p)
        cout << val << " ";
    cout << endl;
}

void johnsonTrotter(int n) {
    vector<int> p(n), d(n);

    // Initialize permutation and directions (all left = -1)
    for (int i = 0; i < n; i++) {
        p[i] = i + 1;
        d[i] = -1;
    }

    printPermutation(p);

    while (true) {
        int largest_mobile = -1, index = -1;

        // Step 1: Find the largest mobile element
        for (int i = 0; i < n; i++) {
            if (d[i] == -1 && i > 0 && p[i] > p[i - 1] && p[i] > largest_mobile) {
                largest_mobile = p[i];
                index = i;
            } else if (d[i] == 1 && i < n - 1 && p[i] > p[i + 1] && p[i] > largest_mobile) {
                largest_mobile = p[i];
                index = i;
            }
        }

        if (largest_mobile == -1) break;  // No more mobile elements

        // Step 2: Swap the mobile element in its direction
        int swap_with = (d[index] == -1) ? index - 1 : index + 1;
        swap(p[index], p[swap_with]);
        swap(d[index], d[swap_with]);
        index = swap_with;

        // Step 3: Reverse direction of all elements larger than the mobile
        for (int i = 0; i < n; i++) {
            if (p[i] > largest_mobile)
                d[i] = -d[i];
        }

        // Step 4: Print the new permutation
        printPermutation(p);
    }
}

int main() {
    int n;
    cout << "Enter number of elements to be permuted: ";
    cin >> n;
    johnsonTrotter(n);
    return 0;
}
